package location;

import java.util.ArrayList;
import java.util.Date;

public class Bookings {
	ArrayList<Date> beginDates=null;
	ArrayList<Date> endDates=null;
	ArrayList<Long> customer=null;
	
	public Bookings(){
		beginDates=new ArrayList<Date>();
		endDates=new ArrayList<Date>();
		customer=new ArrayList<Long>();
	}
	
	/**
	 * Creates a new booking for the given time frame
	 * @param customer customer related to the booking
	 * @param beginDate begin date of the booking
	 * @param endDate end date of the booking 
	 * @throws IllegalArgumentException will throw IllegalargumentException if end date < begin date or if time frame not available
	 */
	public void bookForTimeFrame(long customerID, Date beginDate, Date endDate) throws IllegalArgumentException {
		// Check if beginDate < endDate
		if (endDate.before(beginDate))
			throw new IllegalArgumentException ("End date before Begin date.");
		//do we already have bookings? if not, add current booking
		if (beginDates.size()==0){
			this.beginDates.add(beginDate);
			this.endDates.add(endDate);
			this.customer.add(customerID);
			return;
		}
		//Timeframe still available?
		if (!this.freeForTimeFrame(beginDate, endDate))
			throw new IllegalArgumentException("Date is not available for booking.");
		//add booking in the right order
		for(Date date:beginDates){
			if (date.before(beginDate)){ // if it is before one or some of the other bookings
				int index=beginDates.indexOf(beginDate)-1;
				this.beginDates.add(index, beginDate);
				this.endDates.add(index, endDate);
				this.customer.add(index, customerID);
				return;
			}
		}
		// or add it at the end of the list, if it is the last item
		this.beginDates.add(beginDate);
		this.endDates.add(endDate);
		this.customer.add(customerID);
	}
	
	/**
	 * Checks if a certain time frame is available for booking
	 * @param beginDate begin date of the time frame
	 * @param endDate end date of the time frame
	 * @return boolean true, if time frame is available for booking, false if not
	 * @throws IllegalArgumentException if end date is before the begin date
	 */
	public boolean freeForTimeFrame(Date beginDate, Date endDate) throws IllegalArgumentException{
		// Check if beginDate < endDate
		if (endDate.before(beginDate))
			throw new IllegalArgumentException ("End date before Begin date.");
		// if there are no bookings available return true
		if (beginDates.size()==0)
			return true;
		// if there is only one booking available or the begin date is before the first available begin date, check for overlap
		if (beginDates.size()==1 || beginDate.before(beginDates.get(0))){
			Date otherBeginDate=beginDates.get(0);
			Date otherEndDate=endDates.get(0);
			if ((beginDate.before(otherBeginDate) && endDate.before(otherBeginDate)) ||
					(beginDate.after(otherEndDate)))
					return true;
			else
				return false;
		// if the end date is after the last available end date, check for overlap
		}else if (endDate.after(endDates.get(endDates.size()-1))){
			Date otherEndDate=endDates.get(endDates.size()-1);;
			if (beginDate.after(otherEndDate))
				return true;
			else
				return false;
				
		}else
			for(Date date:beginDates)	{
				if (date.after(endDate)){
					int lastIndex=(endDates.indexOf(date)-1);
					//Date previousBeginDate=beginDates.get(lastIndex);
					Date previousEndDate=endDates.get(lastIndex);
					//Date nextBeginDate=beginDates.get(lastIndex+1);
					//Date nextEndDate=endDates.get(lastIndex+1);
					if (beginDate.after(previousEndDate))
						return true; //case 
					else return false;
				}
			}
		return false;
	}
}
